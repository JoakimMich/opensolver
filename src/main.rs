use crate::postfloptree::*;
use crate::range::*;
use crate::hand_range::*;
use crate::trainer::*;
use crate::upi::*;

mod postfloptree;
mod range;
mod cfr;
mod hand_range;
mod best_response;
mod trainer;
mod isomorphism;
mod upi;

use rust_poker::hand_range::{get_card_mask};


#[global_allocator]
static GLOBAL: mimalloc::MiMalloc = mimalloc::MiMalloc;

fn main() {
    let mut cli_session = CliSession::new();
    cli_session.start();
}


fn test_flop() {
    let oop_range = HandRange::from_string("AA,QQ".to_string());
    let ip_range = HandRange::from_string("KcKd".to_string());
    let tree_board = "2c2d2s".to_string();
    let mut range_manager = RangeManager::new(oop_range, ip_range, tree_board);
    let lines_pioconfig = vec![vec![0, 0, 0, 0, 0, 126, 320, 910],
                    vec![0, 0, 0, 0, 126, 320, 910],
                    vec![0, 0, 0, 99, 269, 269, 269, 910],
                    vec![0, 0, 0, 99, 269, 269, 910],
                    vec![0, 0, 0, 99, 269, 592, 592, 592, 910],
                    vec![0, 0, 0, 99, 269, 592, 592, 910],
                    vec![0, 0, 0, 99, 269, 592, 910],
                    vec![0, 0, 0, 99, 99, 364, 910],
                    vec![0, 0, 0, 99, 99, 99, 364, 910],
                    vec![0, 0, 99, 269, 269, 269, 910],
                    vec![0, 0, 99, 269, 269, 910],
                    vec![0, 0, 99, 269, 592, 592, 592, 910],
                    vec![0, 0, 99, 269, 592, 592, 910],
                    vec![0, 0, 99, 269, 592, 910],
                    vec![0, 0, 99, 99, 364, 910],
                    vec![0, 0, 99, 99, 99, 364, 910],
                    vec![0, 94, 260, 260, 260, 260, 260, 910],
                    vec![0, 94, 260, 260, 260, 260, 910],
                    vec![0, 94, 260, 260, 260, 910],
                    vec![0, 94, 260, 260, 910],
                    vec![0, 94, 260, 575, 575, 575, 575, 575, 910],
                    vec![0, 94, 260, 575, 575, 575, 575, 910],
                    vec![0, 94, 260, 575, 575, 575, 910],
                    vec![0, 94, 260, 575, 575, 910],
                    vec![0, 94, 260, 575, 910],
                    vec![0, 94, 94, 296, 296, 296, 910],
                    vec![0, 94, 94, 296, 296, 910],
                    vec![0, 94, 94, 296, 910],
                    vec![0, 94, 94, 94, 296, 296, 296, 910],
                    vec![0, 94, 94, 94, 296, 296, 910],
                    vec![0, 94, 94, 94, 296, 910],
                    vec![0, 94, 94, 94, 94, 352, 910],
                    vec![0, 94, 94, 94, 94, 94, 352, 910],
                    vec![94, 260, 260, 260, 260, 260, 910],
                    vec![94, 260, 260, 260, 260, 910],
                    vec![94, 260, 260, 260, 910],
                    vec![94, 260, 260, 910],
                    vec![94, 260, 575, 575, 575, 575, 575, 910],
                    vec![94, 260, 575, 575, 575, 575, 910],
                    vec![94, 260, 575, 575, 575, 910],
                    vec![94, 260, 575, 575, 910],
                    vec![94, 260, 575, 910],
                    vec![94, 94, 296, 296, 296, 910],
                    vec![94, 94, 296, 296, 910],
                    vec![94, 94, 296, 910],
                    vec![94, 94, 94, 296, 296, 296, 910],
                    vec![94, 94, 94, 296, 296, 910],
                    vec![94, 94, 94, 296, 910],
                    vec![94, 94, 94, 94, 352, 910],
                    vec![94, 94, 94, 94, 94, 352, 910]];
                    
    let lines_100 = vec![
        vec![0, 0, 0, 0, 0, 180, 720, 910],
        vec![0, 0, 0, 0, 180, 720, 910],
        vec![0, 0, 0, 180, 180, 180, 720, 910],
        vec![0, 0, 0, 180, 180, 720, 910],
        vec![0, 0, 0, 180, 720, 720, 720, 910],
        vec![0, 0, 0, 180, 720, 720, 910],
        vec![0, 0, 0, 180, 720, 910],
        vec![0, 0, 180, 180, 180, 720, 910],
        vec![0, 0, 180, 180, 720, 910],
        vec![0, 0, 180, 720, 720, 720, 910],
        vec![0, 0, 180, 720, 720, 910],
        vec![0, 0, 180, 720, 910],
        vec![0, 180, 180, 180, 180, 180, 720, 910],
        vec![0, 180, 180, 180, 180, 720, 910],
        vec![0, 180, 180, 180, 720, 720, 720, 910],
        vec![0, 180, 180, 180, 720, 720, 910],
        vec![0, 180, 180, 180, 720, 910],
        vec![0, 180, 180, 720, 720, 720, 910],
        vec![0, 180, 180, 720, 720, 910],
        vec![0, 180, 180, 720, 910],
        vec![0, 180, 720, 720, 720, 720, 720, 910],
        vec![0, 180, 720, 720, 720, 720, 910],
        vec![0, 180, 720, 720, 720, 910],
        vec![0, 180, 720, 720, 910],
        vec![0, 180, 720, 910],
        vec![180, 180, 180, 180, 180, 720, 910],
        vec![180, 180, 180, 180, 720, 910],
        vec![180, 180, 180, 720, 720, 720, 910],
        vec![180, 180, 180, 720, 720, 910],
        vec![180, 180, 180, 720, 910],
        vec![180, 180, 720, 720, 720, 910],
        vec![180, 180, 720, 720, 910],
        vec![180, 180, 720, 910],
        vec![180, 720, 720, 720, 720, 720, 910],
        vec![180, 720, 720, 720, 720, 910],
        vec![180, 720, 720, 720, 910],
        vec![180, 720, 720, 910],
        vec![180, 720, 910],
    ];
    
        
    let mut trainer = Trainer::new(range_manager, lines_pioconfig, 910, 180);
    //trainer.train(Accuracy::Fraction(0.0), TrainFinish::Iterations(5000));
}
